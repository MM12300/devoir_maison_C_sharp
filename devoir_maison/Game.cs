using System;
using System.Collections.Generic;
using System.Linq;
using devoir_maison.CharacterTypes;
using System.Threading;


namespace devoir_maison
{
    class Game
    {
        private Randomizer random = new Randomizer();

        //Game introduction message and fighters list creation (dual or battle-royale)
        public List<Character> GameIntro()
        {
            Console.WriteLine("------------------------------------------------------------------------------------------------");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Welcome to Battle-Royale Versus Fighting Limited 2021");
            Console.WriteLine("Between 2 and 8 fighters can compete into the Battle-Royale Arena");
            Console.ResetColor();
            Console.WriteLine("------------------------------------------------------------------------------------------------");
            string gameMode = GameMode();
            List<Character> fightersList = Fighters(gameMode);

            return fightersList;
        }

        //Gamemode choices : Dual or Battle-Royale - List of fighters generated by the program or by the user (inputs)
        public string GameMode()
        {
            Console.WriteLine("Would you like to fight in dual mode or in Battle-Royale mode ?");
            Console.WriteLine("1 - (DUAL-MODE) - Choose (name and type) 2 fighters and confront them !");
            Console.WriteLine("2 - (BATTLE-ROYALE) - Choose (name and type) 2 to 8 fighters and let them fight in the Arena !");
            Console.WriteLine("3 - SCENARIO - (DUAL MODE) - Select 2 fighters randomly and confront them !");
            Console.WriteLine("4 - SCENARIO - (BATTLE-ROYALE) - Let all 10 types of fighters foght into a deadly battle-royale !");
            Console.WriteLine("(Type '1', '2', '3' or '4')");
            Console.WriteLine("------------------------------------------------------------------------------------------------");
            string input = Console.ReadLine();

            if (input == "1")
            {
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine("Dual Mode !");
                Console.ResetColor();
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                return "Dual";
            }
            else if (input == "2")
            {
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine("Battle-Royale !");
                Console.ResetColor();
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                return "Battle-Royale";
            }
            else if (input == "3")
            {
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine("Test Scenario with two fighters !");
                Console.ResetColor();
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                return "Dual Test Scenario";
            }
            else if (input == "4")
            {
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine("Test Scenario with a fighter of each type for deadly Battle-Royale !");
                Console.ResetColor();
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                return "Battle-Royale Test Scenario";
            }
            else
            {
                return GameMode();
            }
        }

        //User input to choose a name for a fighter
        public string createFighterName()
        {
            Console.WriteLine("- What is your fighter name ? (max 12 characters)");
            string name = Console.ReadLine();
            if (name.Length < 12)
            {
                Console.WriteLine("Great choice, {0} is a good name for a fighter.", name);
                return name;
            }
            else
            {
                return createFighterName();
            }
        }

        //User input to choose a type for a fighter
        public string createFighterType()
        {
            Console.WriteLine("- What is your fighter type ?");
            Console.WriteLine("You can choose between : Berserker, Ghoul, Guardian, Kamikaze, Lich, Priest, Robot, Vampire, Warrior and Zombie");
            Console.WriteLine("(Write the fighter type completely (case sensitive)");
            string type = Console.ReadLine();
            if (type != "Berserker" && type != "Ghoul" && type != "Guardian" && type != "Kamikaze" && type != "Lich" && type != "Priest" && type != "Robot" && type != "Vampire" && type != "Warrior" && type != "Zombie")
            {
                return createFighterType();
            }
            else
            {
                Console.WriteLine("{0} are very powerful !", type);
                return type;
            }
        }

        //Create a fighter from user inputs.
        public Character createFighter()
        {
            string name = createFighterName();
            string type = createFighterType();
            Console.WriteLine("------------------------------------------------------------------------------------------------");
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("You created {0} the {1}", name, type);
            Console.ResetColor();
            Console.WriteLine("------------------------------------------------------------------------------------------------");

            if (type == "Berserker")
            {
                return new Berserker(name);
            }
            else if (type == "Ghoul")
            {
                return new Ghoul(name);
            }
            else if (type == "Guardian")
            {
                return new Guardian(name);
            }
            else if (type == "Kamikaze")
            {
                return new Kamikaze(name);
            }
            else if (type == "Lich")
            {
                return new Lich(name);
            }
            else if (type == "Priest")
            {
                return new Priest(name);
            }
            else if (type == "Robot")
            {
                return new Robot(name);
            }
            else if (type == "Vampire")
            {
                return new Vampire(name);
            }
            else if (type == "Warrior")
            {
                return new Warrior(name);
            }
            else if (type == "Zombie")
            {
                return new Zombie(name);
            }
            else
            {
                return createFighter();
            }
        }

        //Fighters List creation depending on the gamemode
        public List<Character> Fighters(string mode)
        {
            List<Character> fightersList = new List<Character>();

            if (mode == "Dual")
            {
                for (int i = 1; i < 3; i++)
                {
                    Console.WriteLine("Create your fighter number {0}", i);
                    Character fighter = createFighter();
                    fightersList.Add(fighter);
                }
            }
            else if (mode == "Battle-Royale")
            {
                for (int i = 0; i < fightersNumberChoice() - 1; i++)
                {
                    Console.WriteLine("Create your fighter number {0}", i);
                    Character fighter = createFighter();
                    fightersList.Add(fighter);
                }
            }
            else if (mode == "Dual Test Scenario")
            {
                Character fighter_one = randomCharacter();
                Thread.Sleep(100);
                Character fighter_two = randomCharacter();
                fightersList.Add(fighter_one);
                fightersList.Add(fighter_two);
                Console.WriteLine("{0} the {1} will fight against {2} the {3}", fighter_one.GetName(), fighter_one.GetCharacterType(), fighter_two.GetName(), fighter_two.GetCharacterType());
            }
            else if (mode == "Battle-Royale Test Scenario")
            {
                Character berserker = new Berserker("Bob the Berserker");
                Character ghoul = new Ghoul("Billy the Ghoul");
                Character guardian = new Guardian("John the Guardian");
                Character kamikaze = new Kamikaze("Jane the Kamikaze");
                Character lich = new Lich("Miguel the Lich");
                Character priest = new Priest("Morgan the Priest");
                Character robot = new Robot("Beebop  the Robot");
                Character vampire = new Vampire("Tom the Priest");
                Character warrior = new Warrior("Conan the Warrior");
                Character zombie = new Zombie("Romero the Zombie");

                fightersList.Add(berserker);
                fightersList.Add(ghoul);
                fightersList.Add(guardian);
                fightersList.Add(kamikaze);
                fightersList.Add(lich);
                fightersList.Add(priest);
                fightersList.Add(robot);
                fightersList.Add(vampire);
                fightersList.Add(warrior);
                fightersList.Add(zombie);
            }
            return fightersList;
        }

        //User input to choose fighters number for Battle-Royale mode
        public int fightersNumberChoice()
        {
            Console.WriteLine("How many fighters in your Battle-Royale ? (2 to 8)");
            string input = Console.ReadLine();
            if ((int.Parse(input) >= 3 && int.Parse(input) <= 8) && int.TryParse(input, out int n))
            {
                Console.WriteLine("You choose to have {0} fighters for your Battle-Royale");
                return int.Parse(input);
            }
            else
            {
                return fightersNumberChoice();
            }
        }

        //ATTACKS
        //Counter-attack between a counter attacker, a counter-attack defender and with a counter-attack value
        public void CounterAttack(Character counterAttacker, Character counterDefender, int counterAttackValue)
        {
            if (counterAttacker.IsAlive() && counterDefender.IsAlive())
            {
                if (counterAttacker.HasAttacks() && CanAttackPain(counterAttacker))
                {
                    counterAttacker.ShowLife();
                    counterDefender.ShowLife();

                    //Remove attacks to attacker
                    counterAttacker.SetCurrentAttackNumber(counterAttacker.GetCurrentAttackNumber() - 1);
                    int counterAttacking;

                    //GUARDIAN RULES
                    if (counterAttacker.GetCharacterType() == "Guardian")
                    {
                        Console.WriteLine("The {0} has a double counter-attack : counter-attacke value original ({1}) and now doubled ({2})", counterAttacker.GetCharacterType(), counterAttackValue, counterAttackValue * 2);
                        counterAttacking = counterAttacker.Fight_attack() + (counterAttackValue * -2);
                    }
                    else
                    {
                        counterAttacking = counterAttacker.Fight_attack() + (counterAttackValue * -1);
                    }
                    int counterDefending = counterDefender.Fight_defense();

                    int attack_margin = counterAttacking - counterDefending;

                    if (attack_margin > 0)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGreen;
                        Console.WriteLine("COUNTER ATTACK SUCCESS");
                        Console.ResetColor();

                        int damage;
                        //BERSERKER RULE : add lost life points of Berserker to his damage during an attack
                        if (counterAttacker.GetCharacterType() == "Berserker")
                        {
                            int berserkerLostLifePoints = counterAttacker.GetMaximumLife() - counterAttacker.GetCurrentLife();
                            damage = attack_margin * (counterAttacker.GetDamages() + berserkerLostLifePoints) / 100;
                            Console.WriteLine("Berserker type of attack , lost live points : {0} = {1} - {2}", berserkerLostLifePoints, counterAttacker.GetMaximumLife(), counterAttacker.GetCurrentLife());
                        }
                        else
                        {
                            damage = attack_margin * counterAttacker.GetDamages() / 100;
                        }

                        int damageGiven = DamageModifier(counterAttacker, counterDefender, damage);
                        Console.WriteLine("DamageGiven ({0}) = {1} * {2} /100", damageGiven, attack_margin, counterAttacker.GetDamages());

                        //VAMPIRE RULE
                        if (counterAttacker.GetCharacterType() == "Vampire")
                        {
                            Console.WriteLine("VAmpire life modifier");
                            counterAttacker.LifeModifier((counterAttacker.GetCurrentLife() + (damageGiven / 2)));
                        }

                        counterDefender.SetCurrentLife(counterDefender.GetCurrentLife() - damageGiven);
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        Console.WriteLine("{0} **attacks** removes {1} life points to {2}", counterAttacker.GetName(), damageGiven, counterDefender.GetName());
                        Console.ResetColor();

                        Pain(counterDefender, damage, counterDefender.GetCurrentLife());
                    }
                    //Delta negative = defender counter-attack
                    else if (attack_margin <= 0)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGreen;
                        Console.WriteLine("{0} has failded so {1} counter-attack BACK", counterAttacker.GetName(), counterDefender.GetName());
                        Console.WriteLine("Counter-Attack value = {0}", attack_margin);
                        Console.ResetColor();
                        CounterAttack(counterDefender, counterAttacker, attack_margin);
                    }
                }
            }
        }

        //Attack between two fighters : one attacker and one defender
        public void SimpleAttack(Character attacker, Character defender)
        {
            int damage;
            if (attacker.IsAlive() && defender.IsAlive())
            {
                if (attacker.HasAttacks() && CanAttackPain(attacker))
                {
                    attacker.ShowLife();
                    defender.ShowLife();
                    //Remove attacks to attacker
                    attacker.SetCurrentAttackNumber(attacker.GetCurrentAttackNumber() - 1);
                    //calculate attack and defense values
                    int attacking = attacker.Fight_attack();
                    int defending = defender.Fight_defense();

                    //(attack margin) calculate delta between attack and defense values
                    int attack_margin = attacking - defending;

                    if (attack_margin > 0)
                    {
                        //BERSERKER RULE : add lost life points of Berserker to his damage during an attack
                        if (attacker.GetCharacterType() == "Berserker")
                        {
                            int berserkerLostLifePoints = attacker.GetMaximumLife() - attacker.GetCurrentLife();
                            damage = attack_margin * (attacker.GetDamages() + berserkerLostLifePoints) / 100;
                            Console.WriteLine("Berserker type of attack , lost live points : {0} = {1} - {2}", berserkerLostLifePoints, attacker.GetMaximumLife(), attacker.GetCurrentLife());
                        }
                        else
                        {
                            damage = attack_margin * attacker.GetDamages() / 100;
                        }

                        int damageGiven = DamageModifier(attacker, defender, damage);

                        Console.WriteLine("DamageGiven ({0}) = {1} * {2} /100", damageGiven, attack_margin, attacker.GetDamages());

                        //VAMPIRE RULE
                        if (attacker.GetCharacterType() == "Vampire")
                        {
                            Console.WriteLine("Vampire life modifier");
                            attacker.LifeModifier((attacker.GetCurrentLife() + (damageGiven / 2)));
                        }

                        defender.SetCurrentLife(defender.GetCurrentLife() - damageGiven);
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        Console.WriteLine("{0} **attacks** removes {1} life points to {2}", attacker.GetName(), damageGiven, defender.GetName());
                        Console.ResetColor();
                        Pain(defender, damage, defender.GetCurrentLife());
                    }
                    //Delta negative = defender counter-attack
                    else if (attack_margin <= 0)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGreen;
                        Console.WriteLine("{0} counter-attack", defender.GetName());
                        Console.WriteLine("Counter-Attacke value = {0}", attack_margin);
                        Console.ResetColor();

                        //ZOMBIE RULE : useless because zombie defense is 0 and defense roll is always 0 but better to keep it if we want to change this character parameters later
                        if (attacker.GetCharacterType() != "Zombie")
                        {
                            CounterAttack(defender, attacker, attack_margin);
                        }
                        else
                        {
                            Console.WriteLine("{0} can't counter attack, he is a {1}", attacker.GetName(), attacker.GetCharacterType());
                        }
                    }
                }
            }
        }

        //Attack and defense process between two fighters
        public void BattleRoyaleAttackAndDefend(Character attacker, Character defender)
        {
            if (attacker.IsAlive() && defender.IsAlive())
            {
                Console.WriteLine("---------------");
                Console.WriteLine("{0} attack BEGINS", attacker.GetName());

                for (int i = 1; i <= attacker.GetTotalAttackNumber(); i++)
                {
                    if (attacker.IsAlive() && defender.IsAlive())
                    {
                        SimpleAttack(attacker, defender);
                    }
                }
                Console.WriteLine("{0} attack is OVER", attacker.GetName());
                attacker.ShowLife();
                defender.ShowLife();
            }
        }

        //PAIN RULES
        //Pain calculation for fighter sensitive to pain
        public void Pain(Character character, int damage, int defenderLifePointsLeft)
        {
            if (character.IsAlive())
            {
                if ((character.GetIsLiving() && character.GetCharacterType() != "Robot") || character.GetCharacterType() == "Ghoul")
                {
                    Console.WriteLine("{0} is a {1}", character.GetName(), character.GetCharacterType());
                    //BERSERKER AND PAIN RULE
                    if (character.GetCharacterType() != "Berserker")
                    {
                        Console.WriteLine("{0} is a living character sensitive to pain, damage {1}, lifePointsLeft {2}", character.GetName(), damage, character.GetCurrentLife());
                        if (damage > defenderLifePointsLeft)
                        {
                            double painPercentage = ((Convert.ToDouble(damage) - Convert.ToDouble(defenderLifePointsLeft)) * 2) / (Convert.ToDouble(defenderLifePointsLeft) + Convert.ToDouble(damage));

                            int roll = random.RandomNumber(0, 100);
                            double painRoll = Convert.ToDouble(roll);

                            Console.WriteLine("painPercentage = {0}, painRoll = {1}", painPercentage * 100, painRoll);

                            if (painPercentage * 100 > painRoll)
                            {
                                int roundsToSkip;

                                //WARRIOR RULES
                                if (character.GetCharacterType() == "Warrior")
                                {
                                    roundsToSkip = 0;
                                    Console.Write("When in pain the {0} ({1}) can only skip the current turn", character.GetCharacterType(), character.GetName());
                                }
                                else
                                {
                                    roundsToSkip = random.RandomNumber(0, 2);
                                }

                                Console.WriteLine("rounds to skip possible = {0}", roundsToSkip);

                                if (character.GetPain() < roundsToSkip)
                                {
                                    character.SetPain(roundsToSkip);
                                    Console.WriteLine("{0} has now a pain of ({1})", character.GetName(), character.GetPain());
                                }
                                else
                                {
                                    Console.WriteLine("Pain is already here and stronger than that", character);
                                }
                            }
                            else
                            {
                                Console.WriteLine("Luckily don't feel the pain, painPercentage = {0}", painPercentage);
                            }
                        }
                        else
                        {
                            Console.WriteLine("Pain is not strong enough to affect {0}", character.GetName());
                        }
                    }
                    else
                    {
                        Console.WriteLine("Berserker doesn't feel the pain");
                    }
                }
                else
                {
                    Console.WriteLine("Undead doesn't feel the pain, except the ghoul");
                }
            }
            else
            {
                Console.WriteLine("{0} is dead so can't feel the pain", character.GetName());
            }
        }

        //Can a fighter attack if he is sensitive to pain
        public bool CanAttackPain(Character attacker)
        {
            if (attacker.GetIsLiving())
            {
                if (attacker.GetPain() > -1)
                {
                    Console.WriteLine("{0} must skip turn because of pain ({1})", attacker.GetName(), attacker.GetPain());
                    return false;
                }
                else
                {
                    Console.WriteLine("No turn to skip because of pain");
                    return true;
                }
            }
            else
            {
                Console.WriteLine("{0} is not sensitive do pain", attacker.GetName());
                return true;
            }

        }

        //Pain attenuation (at the beginning of each turn)
        public void AttenuatePain(Character character)
        {
            if (character.GetPain() == -1)
            {
                Console.WriteLine("{0} pain is now back to normal ({1})", character.GetName(), character.GetPain());
            }
            if (character.GetPain() > -1)
            {
                int painBeforeAttenuation = character.GetPain();
                int painAfterAttenuation = character.GetPain() - 1;
                character.SetPain(painAfterAttenuation);
                Console.WriteLine("{0} pain decreases from {1} to {2}", character.GetName(), painBeforeAttenuation, painAfterAttenuation);
            }
        }

        //Damage modifier in case of blessed/cursed damage with blessed/cursed characters
        public int DamageModifier(Character attacker, Character defender, int damage)
        {
            // if defender = blessed AND attacker = cursed OR defender = cursed AND attacker = blessed, life points lost after attack multiplied by 2
            if ((defender.GetIsBlessed() && attacker.GetCursedDamage()) || (defender.GetIsCursed() && attacker.GetBlessedDamage()))
            {
                int doubleDamage = damage * 2;
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Attacker is a {0} and defender is a {1} so damage*2 = {2} * 2 = {3}", attacker.GetCharacterType(), defender.GetCharacterType(), damage, doubleDamage);
                Console.ResetColor();
                return doubleDamage;
            }
            else
            {
                return damage;
            }
        }

        //Reset attack number each round
        public void BattleRoyaleResetAttackNumber(List<Character> fightersList)
        {
            foreach (Character fighter in fightersList)
            {
                //BERSERKER RULE
                if (fighter.GetCharacterType() == "Berserker" && fighter.GetCurrentLife() < (fighter.GetMaximumLife() / 2))
                {
                    Console.WriteLine("{0} is a {1} with less than half of its total life points {2}/{3}", fighter.GetName(), fighter.GetCharacterType(), fighter.GetCurrentLife(), fighter.GetMaximumLife());
                    fighter.SetCurrentAttackNumber(4);
                    fighter.SetTotalAttackNumber(4);
                    Console.WriteLine("Attack number is set at {0}", fighter.GetCurrentAttackNumber());
                }
                else
                {
                    fighter.SetCurrentAttackNumber(fighter.GetTotalAttackNumber());
                }
            }
        }

        //Calculate initiative for each Character
        public List<Character> BattleRoyaleFightersInitiative(List<Character> fightersList)
        {

            Dictionary<Character, int> fightersUnsorted = new Dictionary<Character, int>();

            foreach (Character fighter in fightersList)
            {
                if (fighter.IsAlive())
                {
                    fighter.CheckCharacterType();
                    fightersUnsorted.Add(fighter, fighter.Fight_initiative());
                }
            }

            Console.BackgroundColor = ConsoleColor.DarkGray;
            Console.WriteLine("Fighters list :");
            foreach (KeyValuePair<Character, int> fighters in fightersUnsorted)
            {
                Console.WriteLine("Character name: {0}, Initiative: {1}",
                    fighters.Key.GetName(), fighters.Value);

            }
            Console.ResetColor();

            var fightersSorted = from entry in fightersUnsorted orderby entry.Value descending select entry;
            Console.WriteLine("-----------");

            Console.BackgroundColor = ConsoleColor.DarkGray;
            Console.WriteLine("Fighters list By Initiative :");
            foreach (KeyValuePair<Character, int> fighters in fightersSorted)
            {
                Console.WriteLine("Character name: {0}, Initiative: {1}",
                    fighters.Key.GetName(), fighters.Value);

            }
            Console.ResetColor();

            List<Character> fightersListInitiative = fightersSorted.Select(kvp => kvp.Key).ToList();

            return fightersListInitiative;
        }

        //Round execution 
        public void BattleRoyaleRound(List<Character> fightersList)
        {
            //si les combattants sont vivants à tester ?
            List<Character> fightersListSortedByInitiative = BattleRoyaleFightersInitiative(fightersList);

            foreach (Character fighter in fightersListSortedByInitiative)
            {
                AttenuatePain(fighter);

                Console.BackgroundColor = ConsoleColor.Blue;
                Console.WriteLine("----- ATTACK OF {0} -----", fighter.GetName());
                Console.ResetColor();

                //KAMIKAZE ATTACK
                if (fighter.GetCharacterType() == "Kamikaze")
                {
                    KamikazeAttack(fighter, fightersListSortedByInitiative);
                }
                else
                {
                    Character opponent = ChooseOpponent(fightersListSortedByInitiative, fighter);
                    if (opponent != null)
                    {
                        BattleRoyaleAttackAndDefend(fighter, opponent);
                    }
                    else
                    {
                        Console.WriteLine("Only one fighter is alive.");
                    }
                }
            }
            Scavenging(fightersListSortedByInitiative);
            BattleRoyaleResetAttackNumber(fightersListSortedByInitiative);
        }

        //Fight execution
        public void BattleRoyaleOrDualFight(List<Character> fightersList)
        {
            int roundNumber = 1;
            while (AreFightersStillAlive(fightersList))
            {
                Console.ForegroundColor = ConsoleColor.DarkRed;
                Console.WriteLine("LETS START THE ROUND {0} ? (push enter key)", roundNumber);
                Console.ResetColor();
                Console.ReadLine();
                BattleRoyaleRound(fightersList);
                roundNumber++;
            }
        }

        //Check if characters are alive
        public bool AreFightersStillAlive(List<Character> fightersList)
        {
            List<Character> aliveFighters = new List<Character>();

            foreach (Character fighter in fightersList)
            {
                if (fighter.GetCurrentLife() > 0)
                {
                    aliveFighters.Add(fighter);
                }
            }

            if (aliveFighters.Count() >= 2)
            {
                Console.WriteLine("{0} fighters are alive and ready to fight", aliveFighters.Count());
                return true;
            }
            else
            {
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("only one fighter is left : {0} is the winner", aliveFighters[0].GetName());
                Console.ResetColor();
                Console.WriteLine("------------------------------------------------------------------------------------------------");
                return false;
            }
        }

        //Select a character as opponent in a list of Characters
        public Character ChooseOpponent(List<Character> fighterList, Character attacker)
        {
            List<Character> opponentsList = new List<Character>(fighterList);
            opponentsList.Remove(attacker);

            List<Character> opponentsListAlive = new List<Character>();

            foreach (Character opponent in opponentsList)
            {
                if (opponent.IsAlive())
                {
                    opponentsListAlive.Add(opponent);
                }
            }

            //PRIEST RULE
            if (attacker.GetCharacterType() == "Priest")
            {
                List<Character> opponentsUndeadList = new List<Character>();
                foreach (Character opponent in opponentsListAlive)
                {
                    if (!opponent.GetIsLiving())
                    {
                        Console.WriteLine("{0} is a priest and attack undead fighters in priority so {1} is added to a new opponents list", attacker.GetName(), opponent.GetName());
                        opponentsUndeadList.Add(opponent);
                    }
                    else
                    {
                        Console.WriteLine("{0} is a priest and attack undead fighters in priority so {1} is NOT added to a new opponents list", attacker.GetName(), opponent.GetName());
                    }
                }

                if (opponentsUndeadList.Count() > 1)
                {
                    return PickRandomFighter(attacker, opponentsUndeadList);
                }
                else
                {
                    return PickRandomFighter(attacker, opponentsListAlive);
                }

            }
            else
            {
                if (opponentsListAlive.Count != 0)
                {
                    return PickRandomFighter(attacker, opponentsListAlive);
                }
                else
                {
                    return null;
                }
            }
        }

        //Choose a Character randomly in a list
        public Character PickRandomFighter(Character attacker, List<Character> opponentsList)
        {
            int randomFighterIndex = random.RandomNumber(0, opponentsList.Count() - 1);
            Console.WriteLine("{0} is attacking {1}", attacker.GetName(), opponentsList[randomFighterIndex].GetName());
            Console.ResetColor();
            return opponentsList[randomFighterIndex];
        }

        //Attack of a kamikaze
        public void KamikazeAttack(Character kamikaze, List<Character> fightersList)
        {
            if (kamikaze.IsAlive())
            {
                List<Character> opponentsList = new List<Character>(fightersList);
                opponentsList.Remove(kamikaze);

                int attacking = kamikaze.Fight_attack();

                foreach (Character fighter in opponentsList)
                {
                    if (!fighter.LuckyRoll())
                    {
                        Console.WriteLine("{0} is not lucky and so {1} the {2} attacks him", fighter.GetCharacterType(), kamikaze.GetName(), kamikaze.GetCharacterType());
                        kamikaze.SetCurrentAttackNumber(kamikaze.GetCurrentAttackNumber() - 1);
                        int defending = fighter.Fight_defense();
                        int attack_margin = attacking - defending;
                        if (attack_margin > 0)
                        {
                            Console.WriteLine("{0} attacks is successfull", kamikaze.GetCharacterType());
                            int damage = attack_margin * kamikaze.GetDamages() / 100;
                            int damageGiven = DamageModifier(kamikaze, fighter, damage);
                            Console.WriteLine("DamageGiven ({0}) = {1} * {2} /100", damageGiven, attack_margin, kamikaze.GetDamages());
                            fighter.SetCurrentLife(fighter.GetCurrentLife() - damageGiven);
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("{0} **attacks** removes {1} life points to {2}", kamikaze.GetName(), damageGiven, fighter.GetName());
                            Console.ResetColor();
                            Pain(fighter, damage, fighter.GetCurrentLife());
                        }
                        else
                        {
                            Console.WriteLine("{0} attacks is not successfull", kamikaze.GetCharacterType());
                        }
                    }
                    else
                    {
                        Console.WriteLine("{0} is lucky and avoids attack from {1} the {2}", fighter.GetCharacterType(), kamikaze.GetName(), kamikaze.GetCharacterType());
                    }
                }
            }
            else
            {
                Console.WriteLine("Kamikaze is dead");
            }

        }

        //SCAVENGER RULE
        public void Scavenging(List<Character> fighters)
        {
            List<Character> scavengers = new List<Character>();

            foreach (Character character in fighters)
            {
                if (character.GetCharacterType() == "Zombie" && character.GetCurrentLife() > 0)
                {
                    scavengers.Add(character);
                }
            }

            foreach (Character character in fighters)
            {
                if (!character.IsAlive())
                {
                    foreach (Character scavenger in scavengers)
                    {
                        int scavengerAddedLife = random.RandomNumber(50, 100);
                        Console.WriteLine("{0} is eating {1} and gain {2} lifepoints", scavenger.GetName(), character.GetName(), scavengerAddedLife);
                        scavenger.LifeModifier(scavengerAddedLife);
                    }
                }
            }
        }

        //Choose a character type randomly
        public Character randomCharacter()
        {
            int randomNumber = random.RandomNumber(1, 10);

            if (randomNumber == 1)
            {
                return new Berserker(RandomString(10));
            }
            else if (randomNumber == 2)
            {
                return new Ghoul(RandomString(10));
            }
            else if (randomNumber == 3)
            {
                return new Guardian(RandomString(10));
            }
            else if (randomNumber == 4)
            {
                return new Kamikaze(RandomString(10));
            }
            else if (randomNumber == 5)
            {
                return new Lich(RandomString(10));
            }
            else if (randomNumber == 6)
            {
                return new Priest(RandomString(10));
            }
            else if (randomNumber == 7)
            {
                return new Robot(RandomString(10));
            }
            else if (randomNumber == 8)
            {
                return new Vampire(RandomString(10));
            }
            else if (randomNumber == 9)
            {
                return new Warrior(RandomString(10));
            }
            else
            {
                return new Zombie(RandomString(10));
            }

        }

        //Create a random name for a Character
        public static string RandomString(int length)
        {
            Random random = new Random();
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            return new string(Enumerable.Repeat(chars, length)
                .Select(s => s[random.Next(s.Length)]).ToArray());
        }

    }
}
